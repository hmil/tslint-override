interface SomeInterface1 {
    func1();
    func2();
}

abstract class ABase {
    constructor() { }
    public static staticBase = 'np';
    public staticChild = 'np';
    public get aGetterToOverride() { return 1; }
    public get aGetterNotToOverride() { return 1; }
    public set aSetterToOverride(value: number) { }
    public set aSetterNotToOverride(value: number) { }
    public aPropertyToOverride = 1;
    public aPropertyNotToOverride = 1;
    public aMethodToOverride(): void { }
    public aMethodNotToOverride(): void { }
}

class Base extends ABase {
    constructor() { }
    public get getterToOverride() { return 1; }
    public get getterNotToOverride() { return 1; }
    public set setterToOverride(value: number) { }
    public set setterNotToOverride(value: number) { }
    public propertyToOverride = 1;
    public propertyNotToOverride = 1;
    public methodToOverride(): void { }
    public methodNotToOverride(): void { }
    public overloadedMethod(a: number): void;
    public overloadedMethod(a: string): void;
    public overloadedMethod(a: number | string): void { }
}

const DynBase = class extends ABase {
    constructor() { }
    public get getterToOverride() { return 1; }
    public get getterNotToOverride() { return 1; }
    public set setterToOverride(value: number) { }
    public set setterNotToOverride(value: number) { }
    public propertyToOverride = 1;
    public propertyNotToOverride = 1;
    public methodToOverride(): void { }
    public methodNotToOverride(): void { }
}

class Intermediary extends DynBase {

    constructor() { }
}

class SomeInterface1Impl implements SomeInterface1 {
    func1() {}
    ~~~~~       [Member is overriding a base member. Use the @override keyword if this override is intended]
    /** @override */
    /** @override */
         ~~~~~~~~     [@override jsdoc tag already specified]
    func2() {}
    
    /** @override */
    func3() {}
    ~~~~~       [Member with @override keyword does not override any base class member]
}

class SomeMap {
    /** @override */
        ~~~~~~~~~    [Extraneous override keyword]
    [key: string]: string;
}


class Example1 extends Base {

    /** @override */ 
        ~~~~~~~~~                       [Extraneous override keyword: constructors always override the parent]
    constructor() { }

    /** @override */
        ~~~~~~~~~                       [Extraneous override keyword: static members cannot override]
    public static someStaticOverride = 'nope';

    /** @override */ public get getterToOverride() { return 1; }
    public get getterNotToOverride() { return 1; }
               ~~~~~~~~~~~~~~~~~~~      [Member is overriding a base member. Use the @override keyword if this override is intended]

    /** @override */ public set setterToOverride(value: number) { }
    public set setterNotToOverride(value: number) { }
               ~~~~~~~~~~~~~~~~~~~      [Member is overriding a base member. Use the @override keyword if this override is intended]
    
    /** @override */ public propertyToOverride = 2;
    public propertyNotToOverride = 2;
           ~~~~~~~~~~~~~~~~~~~~~        [Member is overriding a base member. Use the @override keyword if this override is intended]

    /** @override */ public aPropertyToOverride = 2;
    public aPropertyNotToOverride = 2;
           ~~~~~~~~~~~~~~~~~~~~~~       [Member is overriding a base member. Use the @override keyword if this override is intended]

    public staticBase = 'np';

    public static staticChild = 'np';

    /**
     * Multiline doc comment
     * @override
     */
    /**
     * Second multi doc comment
     * @override
        ~~~~~~~~ [@override jsdoc tag already specified]
     */
    public methodToOverride(): void { }

    /** @override */ public mehtodToOverride(): void { }
                            ~~~~~~~~~~~~~~~~            [Member with @override keyword does not override any base class member]
    public methodNotToOverride(): void { }
           ~~~~~~~~~~~~~~~~~~~         [Member is overriding a base member. Use the @override keyword if this override is intended]

    /** @override */ public aMethodToOverride(): void { }
    public aMethodNotToOverride(): void { }
           ~~~~~~~~~~~~~~~~~~~~        [Member is overriding a base member. Use the @override keyword if this override is intended]

    public overloadedMethod(a: number): void;
    public overloadedMethod(a: string): void;
    public overloadedMethod(a: number | string): void { }
           ~~~~~~~~~~~~~~~~            [Member is overriding a base member. Use the @override keyword if this override is intended]
}

const Example2 = class extends Base {

    constructor() { }

    /** @override */ public get getterToOverride() { return 1; }
    public get getterNotToOverride() { return 1; }
               ~~~~~~~~~~~~~~~~~~~       [Member is overriding a base member. Use the @override keyword if this override is intended]
    
    /** @override */ public set setterToOverride(value: number) { }
    public set setterNotToOverride(value: number) { }
               ~~~~~~~~~~~~~~~~~~~       [Member is overriding a base member. Use the @override keyword if this override is intended]
    
    /** @override */ public propertyToOverride = 2;
    public propertyNotToOverride = 2;
           ~~~~~~~~~~~~~~~~~~~~~       [Member is overriding a base member. Use the @override keyword if this override is intended]

    /** @override */ public aPropertyToOverride = 2;
    public aPropertyNotToOverride = 2;
           ~~~~~~~~~~~~~~~~~~~~~~      [Member is overriding a base member. Use the @override keyword if this override is intended]

    /** @override */ public methodToOverride(): void { }

    /** @override */
    public mehtodToOverride(): void { }
           ~~~~~~~~~~~~~~~~            [Member with @override keyword does not override any base class member]

    public methodNotToOverride(): void { }
           ~~~~~~~~~~~~~~~~~~~         [Member is overriding a base member. Use the @override keyword if this override is intended]

    /** @override */ public aMethodToOverride(): void { }
    public aMethodNotToOverride(): void { }
           ~~~~~~~~~~~~~~~~~~~~        [Member is overriding a base member. Use the @override keyword if this override is intended]
}

class Example3 extends DynBase {

    constructor() { }

    /** @override */ public get getterToOverride() { return 1; }
    public get getterNotToOverride() { return 1; }
               ~~~~~~~~~~~~~~~~~~~       [Member is overriding a base member. Use the @override keyword if this override is intended]
    
    /** @override */ public set setterToOverride(value: number) { }
    public set setterNotToOverride(value: number) { }
               ~~~~~~~~~~~~~~~~~~~       [Member is overriding a base member. Use the @override keyword if this override is intended]
    
    /** @override */ public propertyToOverride = 2;
    public propertyNotToOverride = 2;
           ~~~~~~~~~~~~~~~~~~~~~       [Member is overriding a base member. Use the @override keyword if this override is intended]

    /** @override */ public aPropertyToOverride = 2;
    public aPropertyNotToOverride = 2;
           ~~~~~~~~~~~~~~~~~~~~~~      [Member is overriding a base member. Use the @override keyword if this override is intended]

    /** @override */ public methodToOverride(): void { }

    /** @override */
    public mehtodToOverride(): void { }
           ~~~~~~~~~~~~~~~~            [Member with @override keyword does not override any base class member]

    public methodNotToOverride(): void { }
           ~~~~~~~~~~~~~~~~~~~         [Member is overriding a base member. Use the @override keyword if this override is intended]

    /** @override */ public aMethodToOverride(): void { }
    public aMethodNotToOverride(): void { }
           ~~~~~~~~~~~~~~~~~~~~        [Member is overriding a base member. Use the @override keyword if this override is intended]
}

class Example4 extends Intermediary {

    constructor() { }

    /** @override */ public get getterToOverride() { return 1; }
    public get getterNotToOverride() { return 1; }
               ~~~~~~~~~~~~~~~~~~~       [Member is overriding a base member. Use the @override keyword if this override is intended]
    
    /** @override */ public set setterToOverride(value: number) { }
    public set setterNotToOverride(value: number) { }
               ~~~~~~~~~~~~~~~~~~~       [Member is overriding a base member. Use the @override keyword if this override is intended]
    
    /** @override */ public propertyToOverride = 2;
    public propertyNotToOverride = 2;
           ~~~~~~~~~~~~~~~~~~~~~       [Member is overriding a base member. Use the @override keyword if this override is intended]

    /** @override */ public aPropertyToOverride = 2;
    public aPropertyNotToOverride = 2;
           ~~~~~~~~~~~~~~~~~~~~~~      [Member is overriding a base member. Use the @override keyword if this override is intended]

    /** @override */ public methodToOverride(): void { }

    /** @override */
    public mehtodToOverride(): void { }
           ~~~~~~~~~~~~~~~~            [Member with @override keyword does not override any base class member]

    public methodNotToOverride(): void { }
           ~~~~~~~~~~~~~~~~~~~         [Member is overriding a base member. Use the @override keyword if this override is intended]

    /** @override */ public aMethodToOverride(): void { }
    public aMethodNotToOverride(): void { }
           ~~~~~~~~~~~~~~~~~~~~        [Member is overriding a base member. Use the @override keyword if this override is intended]
}

class TagTest extends Base {

    @override
    ~~~~~~~~~                       [Extraneous override keyword: constructors always override the parent]
    constructor() { }

    @override
    ~~~~~~~~~                       [Extraneous override keyword: static members cannot override]
    public static someStaticOverride = 'nope';

    constructor() { }

    @override public get getterToOverride() { return 1; }
    public get getterNotToOverride() { return 1; }
               ~~~~~~~~~~~~~~~~~~~       [Member is overriding a base member. Use the @override keyword if this override is intended]
    
    @override public set setterToOverride(value: number) { }
    public set setterNotToOverride(value: number) { }
               ~~~~~~~~~~~~~~~~~~~       [Member is overriding a base member. Use the @override keyword if this override is intended]
    
    @override public propertyToOverride = 2;
    public propertyNotToOverride = 2;
           ~~~~~~~~~~~~~~~~~~~~~       [Member is overriding a base member. Use the @override keyword if this override is intended]

    @override public aPropertyToOverride = 2;
    public aPropertyNotToOverride = 2;
           ~~~~~~~~~~~~~~~~~~~~~~      [Member is overriding a base member. Use the @override keyword if this override is intended]

    /**
     * Some funky method
     * @override
     */
    @override
    public methodToOverride(): void { }

    @Override
    public methodToOverride(): void { }

    @override
    @override public mehtodToOverride(): void { }
    ~~~~~~~~~                                    [@override decorator already specified]
                     ~~~~~~~~~~~~~~~~            [Member with @override keyword does not override any base class member]

    public methodNotToOverride(): void { }
           ~~~~~~~~~~~~~~~~~~~         [Member is overriding a base member. Use the @override keyword if this override is intended]

    @override public aMethodToOverride(): void { }
    public aMethodNotToOverride(): void { }
           ~~~~~~~~~~~~~~~~~~~~        [Member is overriding a base member. Use the @override keyword if this override is intended]
}
